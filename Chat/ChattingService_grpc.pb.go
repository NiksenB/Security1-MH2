// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChattingServiceClient is the client API for ChattingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChattingServiceClient interface {
	JoinChat(ctx context.Context, in *User, opts ...grpc.CallOption) (ChattingService_JoinChatClient, error)
	SendEncrypted(ctx context.Context, in *ClientEncrypted, opts ...grpc.CallOption) (*Empty, error)
}

type chattingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChattingServiceClient(cc grpc.ClientConnInterface) ChattingServiceClient {
	return &chattingServiceClient{cc}
}

func (c *chattingServiceClient) JoinChat(ctx context.Context, in *User, opts ...grpc.CallOption) (ChattingService_JoinChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChattingService_ServiceDesc.Streams[0], "/Chat.ChattingService/JoinChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chattingServiceJoinChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChattingService_JoinChatClient interface {
	Recv() (*FromServer, error)
	grpc.ClientStream
}

type chattingServiceJoinChatClient struct {
	grpc.ClientStream
}

func (x *chattingServiceJoinChatClient) Recv() (*FromServer, error) {
	m := new(FromServer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chattingServiceClient) SendEncrypted(ctx context.Context, in *ClientEncrypted, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Chat.ChattingService/SendEncrypted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChattingServiceServer is the server API for ChattingService service.
// All implementations must embed UnimplementedChattingServiceServer
// for forward compatibility
type ChattingServiceServer interface {
	JoinChat(*User, ChattingService_JoinChatServer) error
	SendEncrypted(context.Context, *ClientEncrypted) (*Empty, error)
	mustEmbedUnimplementedChattingServiceServer()
}

// UnimplementedChattingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChattingServiceServer struct {
}

func (UnimplementedChattingServiceServer) JoinChat(*User, ChattingService_JoinChatServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChat not implemented")
}
func (UnimplementedChattingServiceServer) SendEncrypted(context.Context, *ClientEncrypted) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEncrypted not implemented")
}
func (UnimplementedChattingServiceServer) mustEmbedUnimplementedChattingServiceServer() {}

// UnsafeChattingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChattingServiceServer will
// result in compilation errors.
type UnsafeChattingServiceServer interface {
	mustEmbedUnimplementedChattingServiceServer()
}

func RegisterChattingServiceServer(s grpc.ServiceRegistrar, srv ChattingServiceServer) {
	s.RegisterService(&ChattingService_ServiceDesc, srv)
}

func _ChattingService_JoinChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(User)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChattingServiceServer).JoinChat(m, &chattingServiceJoinChatServer{stream})
}

type ChattingService_JoinChatServer interface {
	Send(*FromServer) error
	grpc.ServerStream
}

type chattingServiceJoinChatServer struct {
	grpc.ServerStream
}

func (x *chattingServiceJoinChatServer) Send(m *FromServer) error {
	return x.ServerStream.SendMsg(m)
}

func _ChattingService_SendEncrypted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientEncrypted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChattingServiceServer).SendEncrypted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Chat.ChattingService/SendEncrypted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChattingServiceServer).SendEncrypted(ctx, req.(*ClientEncrypted))
	}
	return interceptor(ctx, in, info, handler)
}

// ChattingService_ServiceDesc is the grpc.ServiceDesc for ChattingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChattingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Chat.ChattingService",
	HandlerType: (*ChattingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEncrypted",
			Handler:    _ChattingService_SendEncrypted_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChat",
			Handler:       _ChattingService_JoinChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Chat/ChattingService.proto",
}
